---
import { urlForImage } from '../sanity/lib/url-for-image';
import type { NavType } from '../types/sanityTypes';
import Navlink from './ui/Navlink.astro';

const nav = Astro.props as NavType;

const navBg = nav?.navColor;
const linkCol = nav?.linkColor;

/* const customClass = [
  `${cleanClass(navBg)}`,
].join(' '); */

---
{ nav ? (
<nav id="nav" class={`grid-component-wrapper transition-all duration-300 ease-in-out top-0 z-50 fixed !gap-y-0 ${navBg} ${linkCol}`}>
    <div class="nav-wrapper w-full">
  <!-- Logo -->
  <a href="/">
    {nav.desktopLogo?.asset?.url ? (
    <img
      src={urlForImage(nav.desktopLogo).width(160).url()}
      alt="Logo"
      class="hidden md:flex max-h-10 w-auto"
    />) : null }
    {nav.mobileLogo?.asset?.url ? (
    <img
      src={urlForImage(nav.mobileLogo).width(160).url()}
      alt="Logo"
      class="md:hidden max-h-14 w-auto"
    />) : null }
  </a>

  <!-- Desktop Menu -->
   { nav.menuItems ? (
  <ul class={`hidden ml-auto md:flex gap-6 items-center text-base`}>
    {nav.menuItems?.map((btn) => (
        <Navlink btn={btn}
/>
    ))}
  </ul>) : null}

  <!-- Mobile Hamburger -->
  <button class="cursor-pointer md:hidden ml-auto" id="nav-toggle" aria-label="Toggle navigation">
    <!-- Hamburger Icon -->
  <svg id="icon-hamburger" class="w-8 h-8 block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
      d="M4 6h16M4 12h16M4 18h16" />
  </svg>

  <!-- Close Icon -->
  <svg id="icon-close" class="w-8 h-8 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
      d="M6 18L18 6M6 6l12 12" />
  </svg>
  </button>
  </div>

  <!-- Mobile Dropdown -->
  <div id="mobile-menu"
  class={`flex justify-end rounded-br-2xl col-span-full h-0 w-full overflow-hidden transition-all duration-300 ease-in-out md:hidden ${navBg}`}
>
    { nav.menuItems ? (
    <ul class="font-secondary text-xl flex items-end flex-col p-4 space-y-2">
      {nav.menuItems?.map((btn) => (
        <Navlink btn={btn}
/>
      ))}
    </ul> ) : null }
  </div>
</nav>) : null}

<script>
  const toggle = document.getElementById('nav-toggle');
  const menu = document.getElementById('mobile-menu');
  const iconHamburger = document.getElementById('icon-hamburger');
  const iconClose = document.getElementById('icon-close');
  const rounded = document.getElementById('nav');
  const nav = document.getElementById('nav');

  let isOpen = false; // track state
  let lastScrollY = window.scrollY;

  function updateMenu() {
    if (!menu) return;
    if (isOpen) {
      menu?.classList.remove('h-0');
      menu?.classList.add('h-full');
      iconHamburger?.classList.add('hidden');
      rounded?.classList.add('rounded-br-2xl');
      iconClose?.classList.remove('hidden');
    } else {
      menu?.classList.remove('h-full');
      menu?.classList.add('h-0');
      iconHamburger?.classList.remove('hidden');
      rounded?.classList.remove('rounded-br-2xl');
      iconClose?.classList.add('hidden');
    }
  }

  toggle?.addEventListener('click', () => {
    isOpen = !isOpen;
    updateMenu();
  });

  // Close menu when clicking a nav link
  document.querySelectorAll('#mobile-menu .navlink').forEach(link => {
    link.addEventListener('click', () => {
      isOpen = false;
      updateMenu();
    });
  });

  // Hide/reveal nav on scroll
  window.addEventListener('scroll', () => {
    if (!nav) return; // âœ… safety check
    if (window.scrollY > lastScrollY) {
      nav.style.transform = 'translateY(-100%)'; // hide
    } else {
      nav.style.transform = 'translateY(0)'; // show
    }
    lastScrollY = window.scrollY;
  });

  // initialize menu closed
  updateMenu();
</script>